/* Import Google Font: Inter */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

/* Basic Reset and Body Styling - Light Theme */
body {
    background-color: #f0f4f8; /* Softer light blue-gray background */
    color: #333; 
    font-family: 'Inter', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    min-height: 100vh;
}

/* Container for centering content */
.container, .game-container {
    background-color: #ffffff;
    padding: 32px 38px;
    border-radius: 16px; /* More rounded corners */
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08); /* Softer, more elevated shadow */
    max-width: 800px;
    width: 100%;
    box-sizing: border-box;
    margin: 20px auto;
}

/* Header Styling */
h1, .game-header h1 {
    font-family: 'Inter', sans-serif;
    font-weight: 700;
    color: #2563eb; /* Vibrant blue */
    text-align: center;
    margin-bottom: 25px;
    font-size: 2.2em;
    letter-spacing: -0.02em; /* Tighter letter spacing for modern look */
}

/* Introduction Text */
.intro, .game-header p {
    text-align: center;
    margin-bottom: 30px;
    color: #4b5563; /* Darker gray for better contrast */
    font-size: 1.05em;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.5;
}

/* Textarea Input Area */
#story-input, textarea {
    background-color: #ffffff;
    color: #333;
    border: 1px solid #e5e7eb; /* Lighter border */
    padding: 20px;
    min-height: 200px;
    border-radius: 12px; /* More rounded */
    margin-bottom: 18px;
    overflow-y: auto;
    font-size: 16px;
    outline: none;
    transition: all 0.2s ease;
    line-height: 1.7;
    width: 100%;
    box-sizing: border-box;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.03); /* Subtle inner shadow */
    resize: vertical;
}

#story-input:focus, textarea:focus {
    border-color: #3b82f6; /* Bright blue focus */
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15); /* Subtle glow effect */
}

/* Word Count Display */
.info-display, .word-count {
    font-family: 'Inter', sans-serif;
    color: #3b82f6; /* Brighter blue */
    text-align: right;
    margin-bottom: 25px;
    font-size: 0.95em;
    font-weight: 600;
}

/* Rules Container */
.rules-container, #rules-list {
    list-style: none;
    padding: 0;
    margin: 0;
    border-top: 1px solid #f3f4f6;
    padding-top: 20px;
    position: relative; /* Added to contain the absolute positioned tooltips */
}

/* Individual Rule Styling */
.rule, .rule-container {
    background-color: #f9fafb; /* Very light background */
    margin-bottom: 12px;
    padding: 16px 18px;
    border-radius: 10px; /* Rounded corners */
    border-left: 4px solid #f43f5e; /* Default unsatisfied color - pink/red */
    display: flex;
    align-items: center;
    position: relative; /* Important for tooltip positioning */
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.02); /* Very subtle shadow */
}

/* Rule Status Symbols */
.rule::before, .rule-container::before {
    font-family: 'Inter', sans-serif;
    font-weight: bold;
    margin-right: 14px;
    font-size: 1.1em;
}

/* Unsatisfied Rule Styling */
.rule.unsatisfied, .rule-container:not(.satisfied) {
    border-left-color: #f43f5e; /* Modern pink/red */
    color: #4b5563;
}

.rule.unsatisfied::before, .rule-container:not(.satisfied)::before {
    content: '✗';
    color: #f43f5e;
}

/* Satisfied Rule Styling */
.rule.satisfied, .rule-container.satisfied {
    border-left-color: #10b981; /* Modern teal green */
    color: #1f2937;
    background-color: #ecfdf5; /* Very light green background */
}

.rule.satisfied::before, .rule-container.satisfied::before {
    content: '✓';
    color: #10b981;
}

/* Rule Text */
.rule-text {
    flex-grow: 1;
    font-size: 15px;
    font-weight: 500;
}

/* Help Icon */
.help-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background-color: #3b82f6; /* Bright blue */
    color: white;
    text-align: center;
    font-size: 14px;
    font-weight: 600;
    margin-left: 12px;
    cursor: pointer;
    user-select: none;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
    transition: all 0.2s ease;
}

.help-icon:hover {
    background-color: #2563eb; /* Darker blue on hover */
    transform: scale(1.05);
}

/* Help Tooltip - Original styles (may be removed when using modal) */
.help-tooltip {
    position: fixed; /* Changed from absolute to fixed */
    max-width: 280px;
    background-color: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 14px 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    z-index: 100;
    font-size: 14px;
    color: #4b5563;
    display: none;
    line-height: 1.5;
    animation: fadeIn 0.2s ease-out;
}

.help-tooltip.visible {
    display: block;
}

/* Struggling rule animation */
.rule-container.struggling {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Button Styling */
button, .button {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
    background-color: #3b82f6; /* Bright blue */
    color: #ffffff;
    border: none;
    padding: 12px 24px;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1em;
    transition: all 0.2s ease;
    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.25);
    display: inline-block;
}

button:hover:not(:disabled), .button:hover:not(:disabled) {
    background-color: #2563eb; /* Darker blue on hover */
    transform: translateY(-2px);
    box-shadow: 0 6px 10px rgba(59, 130, 246, 0.3);
}

button:active:not(:disabled), .button:active:not(:disabled) {
    background-color: #1d4ed8;
    transform: translateY(0);
}

/* Disabled Button Styling */
button:disabled, .button:disabled {
    background-color: #d1d5db;
    color: #9ca3af;
    cursor: not-allowed;
    box-shadow: none;
}

/* Completion Message */
.win-message, .completion-message {
    background-color: #ecfdf5; /* Light green */
    border: 1px solid #10b981; /* Modern green */
    color: #065f46; /* Dark green text */
    padding: 20px;
    margin-top: 30px;
    text-align: center;
    border-radius: 12px;
    font-weight: 500;
    display: none;
    animation: fadeIn 0.3s ease-out;
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.1);
}

.win-message.visible, .completion-message.visible {
    display: block;
}

.win-message h2, .completion-message h2 {
    color: #065f46;
    margin-top: 0;
    font-size: 1.5em;
}

/* Button spacing */
#download-button {
    margin-right: 10px;
}

/* Responsive Design */
@media (max-width: 640px) {
    body {
        padding: 12px;
    }
    .container, .game-container {
        padding: 24px 20px;
        border-radius: 12px;
    }
    h1, .game-header h1 {
        font-size: 1.8em;
        margin-bottom: 15px;
    }
    #story-input, textarea {
        min-height: 150px;
        padding: 16px;
        font-size: 15px;
    }
    button, .button {
        padding: 10px 18px;
        font-size: 0.95em;
    }
    .rule, .rule-container {
        padding: 12px 14px;
        font-size: 0.92em;
    }
    .help-tooltip {
        width: calc(100% - 24px);
        max-width: none;
        left: 12px !important;
        right: 12px !important;
    }
}

/*
 * Modal System Styles
 */

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000; /* Very high z-index to be above everything */
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.2s ease, visibility 0.2s ease;
}

.modal-overlay.visible {
  opacity: 1;
  visibility: visible;
}

.help-modal {
  background-color: white;
  border-radius: 16px;
  max-width: 450px;
  width: 90%;
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
  transform: translateY(20px);
  transition: transform 0.3s ease;
  overflow: hidden;
}

.modal-overlay.visible .help-modal {
  transform: translateY(0);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 18px 24px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h3 {
  margin: 0;
  color: #2563eb;
  font-size: 1.2em;
  font-weight: 600;
}

.close-button {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  padding: 0;
  transition: all 0.2s ease;
}

.close-button:hover {
  background-color: #f3f4f6;
  color: #1f2937;
}

.modal-content {
  padding: 20px 24px;
  line-height: 1.6;
  color: #4b5563;
  font-size: 15px;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .help-modal {
    width: 95%;
    max-width: none;
  }
  
  .modal-header {
    padding: 15px 20px;
  }
  
  .modal-content {
    padding: 16px 20px;
  }
}

// ================== REPLACE TOOLTIP LOGIC WITH THIS JAVASCRIPT ==================
// Replace the tooltip-related code in your script.js

// Function to render a rule with help icon
function renderRule(rule) {
    const ruleElement = document.createElement('div');
    ruleElement.className = `rule-container ${rule.satisfied ? 'satisfied' : ''} ${!rule.active ? 'inactive' : ''} ${rule.struggling ? 'struggling' : ''}`;
    ruleElement.id = `rule-${rule.id}`;
    
    const ruleText = document.createElement('div');
    ruleText.className = 'rule-text';
    ruleText.innerText = rule.description;
    
    ruleElement.appendChild(ruleText);
    
    // Only add help icon for active, unsatisfied rules
    if (rule.active && !rule.satisfied) {
        const helpIcon = document.createElement('div');
        helpIcon.className = 'help-icon';
        helpIcon.innerText = '?';
        helpIcon.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent click from affecting parent elements
            showHelpModal(rule.id);
        });
        
        ruleElement.appendChild(helpIcon);
    }
    
    return ruleElement;
}

// Show help modal
function showHelpModal(ruleId) {
    const rule = rules.find(r => r.id === ruleId);
    if (!rule) return;
    
    // Set content
    document.getElementById('modal-title').textContent = `Help: Rule ${ruleId}`;
    document.getElementById('modal-content').textContent = rule.helpText || 'Try to fulfill this rule to continue your story.';
    
    // Show modal
    document.getElementById('help-modal-overlay').classList.add('visible');
    
    // Mark that we've shown help for this rule
    rule.helpShown = true;
}

// Close help modal
function closeHelpModal() {
    document.getElementById('help-modal-overlay').classList.remove('visible');
}

// Auto-show help for rules that the user is struggling with
function monitorUserStruggle() {
    const STRUGGLE_TIME = 20000; // 20 seconds
    
    rules.forEach(rule => {
        if (rule.active && !rule.satisfied && !rule.helpShown) {
            const timeActive = Date.now() - rule.activeSince;
            
            if (timeActive > STRUGGLE_TIME) {
                rule.struggling = true;
                showHelpModal(rule.id);
                rule.helpShown = true;
                
                // Auto-hide after 8 seconds
                setTimeout(() => {
                    closeHelpModal();
                }, 8000);
                
                // Update the rule display
                updateRulesList();
            }
        }
    });
}

// Initialize the game
function initGame() {
    // Set up event listeners
    const storyInput = document.getElementById('story-input');
    storyInput.addEventListener('input', handleTextInput);
    
    const restartButton = document.getElementById('restart-button');
    if (restartButton) {
        restartButton.addEventListener('click', restartGame);
    }
    
    const downloadButton = document.getElementById('download-button');
    if (downloadButton) {
        downloadButton.addEventListener('click', downloadStory);
    }
    
    // Set up modal close button
    const modalCloseButton = document.getElementById('modal-close');
    if (modalCloseButton) {
        modalCloseButton.addEventListener('click', closeHelpModal);
    }
    
    // Close modal when clicking overlay
    const modalOverlay = document.getElementById('help-modal-overlay');
    if (modalOverlay) {
        modalOverlay.addEventListener('click', function(event) {
            if (event.target === modalOverlay) {
                closeHelpModal();
            }
        });
    }
    
    // Set up initial rules
    updateRulesList();
    
    // Set up the monitor to check periodically for user struggle
    setInterval(monitorUserStruggle, 5000); // Check every 5 seconds
}
